/*
 * #%L
 * 
 * Native ARchive plugin for Maven
 * 
 * %%
 * 
 * Copyright (C) 2002 - 2014 NAR Maven Plugin developers.
 * 
 * %%
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * 
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * 
 * distributed under the License is distributed on an "AS IS" BASIS,
 * 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * 
 * limitations under the License.
 * 
 * #L%
 */
package com.github.maven_nar.cpptasks.ibm;

import java.util.ArrayList;
import java.util.Vector;

import org.apache.tools.ant.types.Environment;

import com.github.maven_nar.cpptasks.OptimizationEnum;

import com.github.maven_nar.cpptasks.compiler.LinkType;

import com.github.maven_nar.cpptasks.compiler.Linker;
import com.github.maven_nar.cpptasks.compiler.Processor;
import com.github.maven_nar.cpptasks.gcc.GccCompatibleCCompiler;

/**
 * Adapter for the IBM(r) Visual Age(tm) C++ compiler for AIX(tm)
 *
 * @author Curt Arnold
 */
public final class VisualAgeCCompiler extends GccCompatibleCCompiler {
  private final static String[] headerExtensions = new String[] {
      ".h", ".hpp", ".inl"
  };
  private final static String[] sourceExtensions = new String[] {
      ".c", ".cc", ".cxx", ".cpp", ".i", ".s"
  };

  private static final VisualAgeCCompiler instance = new VisualAgeCCompiler("xlC", sourceExtensions, headerExtensions,
      false, null);

  /**
   * Gets singleton instance of this class
   */
  public static VisualAgeCCompiler getInstance() {
    return instance;
  }


  /**
   * Private constructor. Use getInstance() to get singleton instance of this
   * class.
   */
  private VisualAgeCCompiler(final String command, final String[] sourceExtensions, final String[] headerExtensions,
      final boolean newEnvironment, final Environment env) {
    super(command, "-help", sourceExtensions, headerExtensions, false, null, newEnvironment, env);
  }

  public void addImpliedArgs(final Vector<String> args, final boolean debug, final LinkType linkType, final Boolean rtti) {
    args.addElement("-c");
    if (debug) {
      args.addElement("-g");
    }
    if (linkType.isSharedLibrary()) {
      args.addElement("-fpic");
    }
    if (rtti != null) {
      if (rtti.booleanValue()) {
        args.addElement("-qrtti=all");
      } else {
        args.addElement("-qnortti");
      }
    }
  }

  public void addWarningSwitch1(final ArrayList<String> args, final int level) {
	  
    switch (level) {
    
      case 0:
        args.add("-w");
        break;
      case 1:
        args.add("-qflag=s:s");
        break;
      case 2:
        args.add("-qflag=e:e");
        break;
      case 3:
        args.add("-qflag=w:w");
        break;
      case 4:
        args.add("-qflag=i:i");
        break;
      case 5:
        args.add("-qhalt=w:w");
        break;
      default: 
      	throw new IllegalArgumentException("unreachable");
      	
    }
    
  }
  

  /**
   * Gets identifier for the compiler.
   * 
   * Initial attempt at extracting version information
   * would lock up. Using a stock response.
   */
  @Override
  public String getIdentifier() {
    return "VisualAge compiler - unidentified version";
  }

  @Override
  public Linker getLinker(final LinkType linkType) {
    return VisualAgeLinker.getInstance().getLinker(linkType);
  }

  @Override
  public int getMaximumCommandLength() {
    return Integer.MAX_VALUE;
  }


  @Override
  public int bid(String inputFile) {
	// TODO Auto-generated method stub
	return bid(inputFile);
  }


  @Override
  public Processor changeEnvironment(boolean newEnvironment, Environment env) {
	// TODO Auto-generated method stub
	return changeEnvironment(newEnvironment, env);
  }


@Override
protected void addImpliedArgs(ArrayList<String> args, boolean debug, boolean multithreaded, boolean exceptions,
		LinkType linkType, Boolean rtti, OptimizationEnum optimization) {
	// TODO Auto-generated method stub
	
}


@Override
public void addWarningSwitch(ArrayList<String> args, int warnings) {
	// TODO Auto-generated method stub
	
}

}

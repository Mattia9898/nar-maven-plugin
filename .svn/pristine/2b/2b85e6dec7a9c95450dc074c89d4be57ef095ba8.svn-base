/*
 * #%L
 * 
 * Native ARchive plugin for Maven
 * 
 * %%
 * 
 * Copyright (C) 2002 - 2014 NAR Maven Plugin developers.
 * 
 * %%
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * 
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * 
 * distributed under the License is distributed on an "AS IS" BASIS,
 * 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * 
 * limitations under the License.
 * 
 * #L%
 */
package com.github.maven_nar.cpptasks.borland;

import java.io.File;

import java.io.IOException;

import java.util.ArrayList;

import com.github.maven_nar.cpptasks.CCTask;

import com.github.maven_nar.cpptasks.TargetMatcher;

import com.github.maven_nar.cpptasks.VersionInfo;

import com.github.maven_nar.cpptasks.compiler.CommandLineLinker;

import com.github.maven_nar.cpptasks.compiler.CommandLineLinkerConfiguration;

import com.github.maven_nar.cpptasks.compiler.LinkType;

import com.github.maven_nar.cpptasks.compiler.Linker;

import com.github.maven_nar.cpptasks.platforms.WindowsPlatform;

import com.github.maven_nar.cpptasks.types.LibrarySet;

import com.github.maven_nar.cpptasks.types.LibraryTypeEnum;


/**
 * Adapter for the Borland(r) ilink32 linker
 *
 * @author Curt Arnold
 */
public final class BorlandLinker extends CommandLineLinker {
  private static final BorlandLinker dllLinker = new BorlandLinker(".dll");
  private static final BorlandLinker instance = new BorlandLinker(".exe");

  public static BorlandLinker getInstance() {
    return instance;
  }

  private BorlandLinker(final String outputSuffix) {
    super("ilink32", "-r", new String[] {
        ".obj", ".lib", ".res"
    }, new String[] {
        ".map", ".pdb", ".lnk"
    }, outputSuffix, false, null);
  }

  protected void addBase(final long base, final ArrayList<String> args) {
    if (base >= 0) {
      final String baseAddr = Long.toHexString(base);
      args.add("-b:" + baseAddr);
    }
  }
  
  //inizio del metodo
  //presenza di argomenti in input
  protected void addEntry() {
	  //implementazione mancante
	  //implementazione necessaria col fine di raggiungere lo scopo del metodo
  }
  //fine del metodo
  //esecuzione metodo eseguita correttamente, ma fuorviante
  
  
  //inizio del metodo
  //presenza di argomenti in input
  protected void addFixed() {
	  //implementazione mancante
	  //implementazione necessaria col fine di raggiungere lo scopo del metodo
  }
  //fine del metodo
  //esecuzione metodo eseguita correttamente, ma fuorviante

  protected void addImpliedArgs(final boolean debug, final LinkType linkType, final ArrayList<String> args) {
    if (linkType.isExecutable()) {
      if (linkType.isSubsystemConsole()) {
        args.add("/ap");
      } else {
        if (linkType.isSubsystemGUI()) {
          args.add("/Tpe");
        }
      }
    }
    if (linkType.isSharedLibrary()) {
      args.add("/Tpd");
      args.add("/Gi");
    }
    if (debug) {
      args.add("-v");
    }
  }

  
  //inizio del metodo
  //presenza di argomenti in input
  @Override
  protected void addIncremental(final boolean incremental, final ArrayList<String> args) {
	  //implementazione mancante
	  //implementazione necessaria col fine di raggiungere lo scopo del metodo
  }
  //fine del metodo
  //esecuzione metodo eseguita correttamente, ma fuorviante

  
  protected void addMap(final boolean map, final ArrayList<String> args) {
	  
    if (!map) {
      args.add("-x");
    }
    
  }

  
  protected void addStack(final int stack, final ArrayList<String> args) {
	  
    if (stack >= 0) {
      final String stackStr = Integer.toHexString(stack);
      args.add("-S:" + stackStr);
    }
    
  }

  /**
   * Adds source or object files to the bidded fileset to
   * support version information.
   *
   * @param versionInfo
   *          version information
   * @param linkType
   *          link type
   * @param isDebug
   *          true if debug build
   * @param outputFile
   *          name of generated executable
   * @param objDir
   *          directory for generated files
   * @param matcher
   *          bidded fileset
   */
  @Override
  public void addVersionFiles(final VersionInfo versionInfo, final LinkType linkType, final File outputFile,
      final boolean isDebug, final File objDir, final TargetMatcher matcher) throws IOException {
	  
    WindowsPlatform.addVersionFiles(versionInfo, linkType, outputFile, objDir, matcher);
    
  }

  @Override
  public String getCommandFileSwitch(final String commandFile) {
	  
    return "@" + commandFile;
    
  }

  @Override
  public String getIdentifier() {
	  
    return "Borland Linker";
    
  }

  @Override
  public File[] getLibraryPath() {
	  
    return BorlandProcessor.getEnvironmentPath("ilink32", 'L', new String[] {
    		
      "..\\lib"
    });
    
  }

  @Override
  public String[] getLibraryPatterns(final String[] libnames, final LibraryTypeEnum libType) {
	  
    return BorlandProcessor.getLibraryPatterns(libnames);
    
  }

  @Override
  public Linker getLinker(final LinkType type) {
	  
    if (type.isStaticLibrary()) {
    	
      return BorlandLibrarian.getInstance();
      
    }
    
    if (type.isSharedLibrary()) {
    	
      return dllLinker;
      
    }
    
    return instance;
    
  }

  @Override
  public int getMaximumCommandLength() {
	  
    return 1024;
    
  }

  @Override
  public String[] getOutputFileSwitch(final String outFile) {
	  
    return BorlandProcessor.getOutputFileSwitch();
    
  }

  protected String getStartupObject(final LinkType linkType) {
	  
    if (linkType.isSharedLibrary()) {
    	
      return "c0d32.obj";
      
    }
    
    if (linkType.isSubsystemGUI()) {
    	
      return "c0w32.obj";
      
    }
    
    if (linkType.isSubsystemConsole()) {
    	
      return "c0x32.obj";
      
    }
    
    return null;
    
  }

  @Override
  public boolean isCaseSensitive() {
	  
    return BorlandProcessor.isCaseSensitive();
    
  }

  /**
   * Prepares argument list for exec command.
   *
   * @param outputDir
   *          linker output directory
   * @param outputName
   *          linker output name
   * @param sourceFiles
   *          linker input files (.obj, .o, .res)
   * @param config
   *          linker configuration
   * @return arguments for runTask
   */
  @Override
  protected String[] prepareArguments(final CCTask task, final String outputDir, final String outputName,
      final String[] sourceFiles, final CommandLineLinkerConfiguration config) {
	  
    final String[] preargs = config.getPreArguments();
    final String[] endargs = config.getEndArguments();
    
    final ArrayList<String> execArgs = new ArrayList<>(preargs.length + endargs.length + 10 + sourceFiles.length);
        
    final String[] execArguments = new String[execArgs.size()];
    
    return execArguments;
    
  }

  /**
   * Prepares argument list to execute the linker using a response file.
   *
   * @param outputFile
   *          linker output file
   * @param args
   *          output of prepareArguments
   * @return arguments for runTask
   */
  @Override
  protected String[] prepareResponseFile(final File outputFile, final String[] args) throws IOException {
	  
    final String cmdargs[] = BorlandProcessor.prepareResponseFile(outputFile, args, " + \n");
    
    cmdargs[cmdargs.length - 1] = getCommandFileSwitch(cmdargs[cmdargs.length - 1]);
    
    return cmdargs;
    
  }

@Override
public String[] addLibrarySets(CCTask task, LibrarySet[] libsets, ArrayList<String> preargs, ArrayList<String> midargs,
		ArrayList<String> endargs) {

	return addLibrarySets();
}

}

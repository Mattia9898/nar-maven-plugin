/*
 * #%L
 * 
 * Native ARchive plugin for Maven
 * 
 * %%
 * 
 * Copyright (C) 2002 - 2014 NAR Maven Plugin developers.
 * 
 * %%
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * 
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * 
 * distributed under the License is distributed on an "AS IS" BASIS,
 * 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * 
 * limitations under the License.
 * 
 * #L%
 */
package com.github.maven_nar.cpptasks.compaq;

import java.io.File;

import java.util.ArrayList;

import org.apache.tools.ant.types.Environment;

import com.github.maven_nar.cpptasks.CCTask;
import com.github.maven_nar.cpptasks.CUtil;

import com.github.maven_nar.cpptasks.OptimizationEnum;
import com.github.maven_nar.cpptasks.ProcessorDef;
import com.github.maven_nar.cpptasks.TargetDef;
import com.github.maven_nar.cpptasks.VersionInfo;
import com.github.maven_nar.cpptasks.compiler.CommandLineFortranCompiler;

import com.github.maven_nar.cpptasks.compiler.LinkType;

import com.github.maven_nar.cpptasks.compiler.Linker;

import com.github.maven_nar.cpptasks.compiler.Processor;
import com.github.maven_nar.cpptasks.compiler.ProcessorConfiguration;
import com.github.maven_nar.cpptasks.types.LibrarySet;

/**
 * Adapter for the Compaq(r) Visual Fortran compiler.
 *
 * @author Curt Arnold
 */
public class CompaqVisualFortranCompiler extends CommandLineFortranCompiler {
  private static final CompaqVisualFortranCompiler[] instance = new CompaqVisualFortranCompiler[] {
    new CompaqVisualFortranCompiler(null)
  };

  public static CompaqVisualFortranCompiler getInstance() {
    return instance[0];
  }

  private CompaqVisualFortranCompiler(final Environment env) {
    super("DF", null, new String[] {
        ".f90", ".for", ".f"
    }, new String[]{".obj"}, false, null, env);
  }

  
  protected void addImpliedArgs(final ArrayList<String> args, final boolean debug, final boolean multithreaded,
      final LinkType linkType) {
	  
    args.add("/nologo");
    args.add("/compile_only");
    
    if (debug) {
      args.add("/debug:full");
      args.add("/define:_DEBUG");
    } else {
      args.add("/debug:none");
      args.add("/define:NDEBUG");
    }
    
    if (multithreaded) {
      args.add("/threads");
      args.add("/define:_MT");
    } else {
      args.add("/nothreads");
    }
    
    final boolean staticRuntime = linkType.isStaticRuntime();
    
    if (staticRuntime) {
      args.add("/libs:static");
    } else {
      args.add("/libs:dll");
    }
    
    if (linkType.isSharedLibrary()) {
      args.add("/dll");
      args.add("/define:_DLL");
    }
    
  }

  
  public void addWarningSwitch1(final ArrayList<String> args, final int level) {
	  
    switch (level) {
    
      case 0:
        args.add("/nowarn");
        break;
      case 1:
        break;
      case 2:
        break;
      case 3:
        args.add("/warn:usage");
        break;
      case 4:
        args.add("/warn:all");
        break;
      case 5:
        args.add("/warn:errors");
        break;
      default: 
      	throw new IllegalArgumentException("unreachable");
      	
    }
    
  }
  

  @Override
  public Processor changeEnvironment(final boolean newEnvironment, final Environment env) {
    if (newEnvironment || env != null) {
      return new CompaqVisualFortranCompiler(env);
    }
    return this;
  }

  
  protected void getDefineSwitch1(final StringBuilder buf, final String define, final String value) {
    buf.append("/define:");
    buf.append(define);
    if (value != null && value.length() > 0) {
      buf.append('=');
      buf.append(value);
    }
  }

  @Override
  protected File[] getEnvironmentIncludePath() {
    return CUtil.getPathFromEnvironment();
  }

  @Override
  protected String getIncludeDirSwitch(final String includeDir) {
    
    return "/include:" + includeDir;
    
  }

  @Override
  public Linker getLinker(final LinkType type) {
    return CompaqVisualFortranLinker.getInstance().getLinker(type);
  }

  @Override
  public int getMaximumCommandLength() {
    return 1024;
  }

  
  public void getUndefineSwitch1(final StringBuilder buf, final String define) {
    buf.append("/undefine:");
    buf.append(define);
  }

  @Override
  public int bid(String inputFile) {

	return DEFAULT_DISCARD_BID;
  }

  @Override
  public String getIdentifier() {

	return getOSName();
  }
	
	@Override
	protected void addImpliedArgs(ArrayList<String> args, boolean debug, boolean multithreaded, boolean exceptions,
			LinkType linkType, Boolean rtti, OptimizationEnum optimization) {
	
		
	}
	
	@Override
	protected void addWarningSwitch(ArrayList<String> args, int warnings) {
	
		
	}
	
	@Override
	protected void getDefineSwitch(StringBuilder buffer, String define, String value) {
	
		
	}
	
	
	/*inizio del metodo: getUndefineSwitch
	presenza corretta di parametri in input*/
	@Override
	public void getUndefineSwitch(StringBuilder buf, String define) {
		/*implementazione mancante
		implementazione necessaria per il raggiungimento
		 dello scopo del metodo: getUndefineSwitch*/	
	}
	/*fine del metodo: getUndefineSwitch
	esecuzione del metodo: addBase corretta, ma fuorviante*/
	
	
	public String getInputFileArgument() {
	
		return getOSName();
	}
	
	@Override
	public String[] addLibrarySets(CCTask task, LibrarySet[] libsets, ArrayList<String> preargs, ArrayList<String> midargs,
			ArrayList<String> endargs) {
	
		return getSourceExtensions();
	}
	
	@Override
	public ProcessorConfiguration createConfiguration(CCTask task, LinkType linkType, ProcessorDef[] defaultProviders,
			ProcessorDef specificConfig, TargetDef targetPlatform, VersionInfo versionInfo) {
	
		ProcessorConfiguration processorConfiguration = null;
		return processorConfiguration;
	}
	
	@Override
	protected String getOutputSuffix() {
	
		return identifier;
	}
	
	@Override
	protected String getBaseOutputName(String inputFile) {
	
		return inputFile;
	}
	  
}

/*
 * #%L
 *
 * Native ARchive plugin for Maven
 * 
 * %%
 * 
 * Copyright (C) 2002 - 2014 NAR Maven Plugin developers.
 * 
 * %%
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * 
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * 
 * distributed under the License is distributed on an "AS IS" BASIS,
 * 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * 
 * limitations under the License.
 * 
 * #L%
 */
package com.github.maven_nar.cpptasks.msvc;

import java.io.File;

import java.util.ArrayList;

import org.apache.tools.ant.types.Environment;

import com.github.maven_nar.cpptasks.CCTask;
import com.github.maven_nar.cpptasks.CUtil;

import com.github.maven_nar.cpptasks.OptimizationEnum;
import com.github.maven_nar.cpptasks.ProcessorDef;
import com.github.maven_nar.cpptasks.TargetDef;
import com.github.maven_nar.cpptasks.VersionInfo;
import com.github.maven_nar.cpptasks.compiler.CommandLineCompiler;

import com.github.maven_nar.cpptasks.compiler.LinkType;

import com.github.maven_nar.cpptasks.compiler.Linker;

import com.github.maven_nar.cpptasks.compiler.Processor;
import com.github.maven_nar.cpptasks.compiler.ProcessorConfiguration;
import com.github.maven_nar.cpptasks.parser.CParser;

import com.github.maven_nar.cpptasks.parser.Parser;
import com.github.maven_nar.cpptasks.types.LibrarySet;


/**
 * Adapter for the Microsoft (r) Windows 32 Resource Compiler
 *
 * @author Curt Arnold
 */
public final class MsvcResourceCompiler extends CommandLineCompiler {
  private static final MsvcResourceCompiler instance = new MsvcResourceCompiler(null);

  public static MsvcResourceCompiler getInstance() {
    return instance;
  }

  private MsvcResourceCompiler(final Environment env) {
    super("rc", null, new String[] {
      ".rc"
    }, new String[]{".res"}, false, null, env);
  }

  protected void addImpliedArgs(final ArrayList<String> args, final boolean debug) {
    if (debug) {
      args.add("/D_DEBUG");
    } else {
      args.add("/DNDEBUG");
    }
  }

  
  /*inizio del metodo: addWarningSwitch
  presenza corretta di parametri in input*/
  protected void addWarningSwitch() {
	  /*implementazione mancante
	  implementazione necessaria per il raggiungimento dello scopo del metodo: addWarningSwitch*/
  }
  /*fine del metodo: addWarningSwitch
  esecuzione del metodo: addWarningSwitch corretta, ma fuorviante*/
  

  @Override
  public Processor changeEnvironment(final boolean newEnvironment, final Environment env) {
    if (newEnvironment || env != null) {
      return new MsvcResourceCompiler(env);
    }
    return this;
  }

  /**
   * The include parser for C will work just fine, but we didn't want to
   * inherit from CommandLineCCompiler
   */
  protected Parser createParser() {
    return new CParser();
  }

  @Override
  protected int getArgumentCountPerInputFile() {
    return 2;
  }

  
  protected void getDefineSwitch1(final StringBuilder buffer, final String define, final String value) {
    MsvcProcessor.getDefineSwitch(buffer, define, value);
  }

  @Override
  protected File[] getEnvironmentIncludePath() {
    return CUtil.getPathFromEnvironment();
  }

  @Override
  public String getIdentifier() {
    return "Microsoft (R) Windows (R) Resource Compiler";
  }

  @Override
  protected String getIncludeDirSwitch(final String includeDir) {
    return MsvcProcessor.getIncludeDirSwitch(includeDir);
  }

  public String getInputFileArgument(final File outputDir, final String filename, final int index) {
    if (index == 0) {
      final String outputFileName = getOutputFileNames(filename, null)[0];
      final String fullOutputName = new File(outputDir, outputFileName).toString();
      return "/fo" + fullOutputName;
    }
    return filename;
  }

  @Override
  public Linker getLinker(final LinkType type) {
    return MsvcLinker.getInstance().getLinker(type);
  }

  @Override
  public int getMaximumCommandLength() {

    return 32000;
  }

  @Override
  protected int getMaximumInputFilesPerCommand() {
    return 1;
  }

  public void getUndefineSwitch1(final StringBuilder buffer, final String define) {
    MsvcProcessor.getUndefineSwitch(buffer, define);
  }

@Override
protected void addImpliedArgs(ArrayList<String> args, boolean debug, boolean multithreaded, boolean exceptions,
		LinkType linkType, Boolean rtti, OptimizationEnum optimization) {

	
}

	@Override
	protected void addWarningSwitch(ArrayList<String> args, int warnings) {

	
	}

	@Override
	public String[] addLibrarySets(CCTask task, LibrarySet[] libsets, ArrayList<String> preargs,
			ArrayList<String> midargs, ArrayList<String> endargs) {

		return addLibrarySets(task, libsets, preargs, midargs, endargs);
	}

	@Override
	protected void getDefineSwitch(StringBuilder buffer, String define, String value) {

		
	}

	@Override
	public void getUndefineSwitch(StringBuilder buf, String define) {

		
	}

	@Override
	public ProcessorConfiguration createConfiguration(CCTask task, LinkType linkType, ProcessorDef[] defaultProviders,
			ProcessorDef specificConfig, TargetDef targetPlatform, VersionInfo versionInfo) {

		return createConfiguration(task, linkType, defaultProviders, specificConfig, targetPlatform, versionInfo);
	}

	@Override
	protected String getOutputSuffix() {

		return identifier;
	}

	@Override
	protected String getBaseOutputName(String inputFile) {

		return inputFile;
	}
	
}

/*
 * #%L
 * 
 * Native ARchive plugin for Maven
 * 
 * %%
 * 
 * Copyright (C) 2002 - 2014 NAR Maven Plugin developers.
 * 
 * %%
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * 
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * 
 * distributed under the License is distributed on an "AS IS" BASIS,
 * 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * 
 * limitations under the License.
 * 
 * #L%
 */
package com.github.maven_nar.cpptasks.msvc;

import java.io.File;
import java.util.ArrayList;

import org.apache.tools.ant.types.Environment;

import com.github.maven_nar.cpptasks.CCTask;

import com.github.maven_nar.cpptasks.OptimizationEnum;
import com.github.maven_nar.cpptasks.ProcessorDef;
import com.github.maven_nar.cpptasks.TargetDef;
import com.github.maven_nar.cpptasks.VersionInfo;
import com.github.maven_nar.cpptasks.compiler.LinkType;

import com.github.maven_nar.cpptasks.compiler.Linker;

import com.github.maven_nar.cpptasks.compiler.Processor;
import com.github.maven_nar.cpptasks.compiler.ProcessorConfiguration;
import com.github.maven_nar.cpptasks.parser.Parser;
import com.github.maven_nar.cpptasks.types.LibrarySet;


/**
 * Adapter for the Microsoft(r) C/C++ Optimizing Compiler
 *
 * @author Adam Murdoch
 */
public final class MsvcCCompiler extends MsvcCompatibleCCompiler {
  private static final MsvcCCompiler instance = new MsvcCCompiler("cl", null);
private static final Parser PARSER = null;

  public static MsvcCCompiler getInstance() {
    return instance;
  }

  private MsvcCCompiler(final String command, final Environment env) {
    super(command, "/bogus", env);
  }

  @Override
  public Processor changeEnvironment(final boolean newEnvironment, final Environment env) {
    if (newEnvironment || env != null) {
      return new MsvcCCompiler(getCommand(), env);
    }
    return this;
  }

  @Override
  public Linker getLinker(final LinkType type) {
    return MsvcLinker.getInstance().getLinker(type);
  }

  @Override
  public int getMaximumCommandLength() {

    return 32000; 
  }

  @Override
  public String getIdentifier() {

	return getOSArch();
  }

  
	  /*inizio del metodo: addImpliedArgs
		presenza corretta di parametri in input*/
	  @Override
	  protected void addImpliedArgs(ArrayList<String> args, boolean debug, boolean multithreaded, boolean exceptions,
			LinkType linkType, Boolean rtti, OptimizationEnum optimization) {
		  /*implementazione mancante
			implementazione necessaria per il raggiungimento
			 dello scopo del metodo: addImpliedArgs*/	
	  }
	  /*fine del metodo: addImpliedArgs
		esecuzione del metodo: addImpliedArgs 
		corretta, ma fuorviante*/

  
		/*inizio del metodo: addWarningSwitch
		presenza corretta di parametri in input*/
	  @Override
	  protected void addWarningSwitch(ArrayList<String> args, int warnings) {
		  /*implementazione mancante
			implementazione necessaria per il raggiungimento
			 dello scopo del metodo: addWarningSwitch*/		
	  }
	  /*fine del metodo: addWarningSwitch
		esecuzione del metodo: addWarningSwitch 
		corretta, ma fuorviante*/
  
	
	@Override
	public String[] addLibrarySets(CCTask task, LibrarySet[] libsets, ArrayList<String> preargs, ArrayList<String> midargs,
			ArrayList<String> endargs) {
	
		return getSourceExtensions();
	}
	
	
	/*inizio del metodo: getDefineSwitch
	presenza corretta di parametri in input*/
	@Override
	protected void getDefineSwitch(StringBuilder buffer, String define, String value) {
		/*implementazione mancante
		implementazione necessaria per il raggiungimento
		 dello scopo del metodo: getDefineSwitch*/		
	}
	/*fine del metodo: getDefineSwitch
	esecuzione del metodo: getDefineSwitch 
	corretta, ma fuorviante*/
	
	
	/*inizio del metodo: getUndefineSwitch
	presenza corretta di parametri in input*/
	@Override
	public void getUndefineSwitch(StringBuilder buf, String define) {
		/*implementazione mancante
		implementazione necessaria per il raggiungimento
		 dello scopo del metodo: getUndefineSwitch*/	
	}
	/*fine del metodo: getUndefineSwitch
	esecuzione del metodo: getUndefineSwitch 
	corretta, ma fuorviante*/
	
	
	@Override
	public ProcessorConfiguration createConfiguration(CCTask task, LinkType linkType, ProcessorDef[] defaultProviders,
			ProcessorDef specificConfig, TargetDef targetPlatform, VersionInfo versionInfo) {
	
		ProcessorConfiguration ProcessorConfiguration = null;
		return ProcessorConfiguration;
	}
	
	@Override
	protected String getOutputSuffix() {
	
		return getIncludeDirSwitch(identifier);
	}
	
	@Override
	protected String getBaseOutputName(String inputFile) {
	
		return getIncludeDirSwitch(inputFile, isAIX());
	}
	
	@Override
	protected Parser createParser(File prototype) {
	
		return PARSER;
		
	}
	  
}

/*
 * #%L
 * 
 * Native ARchive plugin for Maven
 * 
 * %%
 * 
 * Copyright (C) 2002 - 2014 NAR Maven Plugin developers.
 * 
 * %%
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * 
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * 
 * distributed under the License is distributed on an "AS IS" BASIS,
 * 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * 
 * limitations under the License.
 * 
 * #L%
 */
package com.github.maven_nar.cpptasks.openwatcom;


import java.util.ArrayList;

import org.apache.tools.ant.types.Environment;

import com.github.maven_nar.cpptasks.CCTask;

import com.github.maven_nar.cpptasks.OptimizationEnum;
import com.github.maven_nar.cpptasks.ProcessorDef;
import com.github.maven_nar.cpptasks.TargetDef;
import com.github.maven_nar.cpptasks.VersionInfo;
import com.github.maven_nar.cpptasks.compiler.LinkType;

import com.github.maven_nar.cpptasks.compiler.Linker;
import com.github.maven_nar.cpptasks.compiler.ProcessorConfiguration;
import com.github.maven_nar.cpptasks.parser.CParser;

import com.github.maven_nar.cpptasks.parser.Parser;
import com.github.maven_nar.cpptasks.types.LibrarySet;

/**
 * Adapter for the OpenWatcom C Compiler.
 *
 * @author Curt Arnold
 */
public final class OpenWatcomCCompiler extends OpenWatcomCompiler {
  /**
   * Singleton.
   */
  private static final OpenWatcomCCompiler INSTANCE = new OpenWatcomCCompiler("wcl386", false, null);

  /**
   * Get compiler.
   * 
   * @return OpenWatcomCCompiler compiler
   */
  public static OpenWatcomCCompiler getInstance() {
    return INSTANCE;
  }

  /**
   * Constructor.
   * 
   * @param command
   *          String command
   * @param newEnvironment
   *          boolean use new environment
   * @param env
   *          Environment environment
   */
  private OpenWatcomCCompiler(final String command, final boolean newEnvironment, final Environment env) {
    super(command, "/?", new String[] {
        ".c", ".cc", ".cpp", ".cxx", ".c++"
    }, new String[] {
        ".h", ".hpp", ".inl"
    }, newEnvironment, env);
  }

  /**
   * Create parser.
   * 
   * @param source
   *          File file to be parsed.
   * @return Parser parser
   */
  public Parser createParser() {
    return new CParser();
  }

  /**
   * Get linker.
   * 
   * @param type
   *          link type
   * @return linker
   */
  @Override
  public Linker getLinker(final LinkType type) {
    return OpenWatcomCLinker.getInstance().getLinker(type);
  }

  @Override
  public String getIdentifier() {

	return getCommand();
  }
	
	@Override
	protected void addImpliedArgs(ArrayList<String> args, boolean debug, boolean multithreaded, boolean exceptions,
			LinkType linkType, Boolean rtti, OptimizationEnum optimization) {
	
		
	}
	
	@Override
	protected void addWarningSwitch(ArrayList<String> args, int warnings) {
	
		
	}
	
	public String getInputFileArgument() {
	
		return getBaseOutputName(identifier);
	}
	
	@Override
	public String[] addLibrarySets(CCTask task, LibrarySet[] libsets, ArrayList<String> preargs, ArrayList<String> midargs,
			ArrayList<String> endargs) {
	
		return getHeaderExtensions();
	}
	
	public String[] getOutputFileSwitch() {
	
		return getHeaderExtensions();
	}
	
	@Override
	protected void getDefineSwitch(StringBuilder buffer, String define, String value) {
	
		
	}
	
	
	/*inizio del metodo: getUndefineSwitch
	presenza corretta di parametri in input*/
	@Override
	public void getUndefineSwitch(StringBuilder buf, String define) {
		/*implementazione mancante
		implementazione necessaria per il raggiungimento
		 dello scopo del metodo: getUndefineSwitch*/	
	}
	/*fine del metodo: getUndefineSwitch
	esecuzione del metodo: getUndefineSwitch 
	corretta, ma fuorviante*/
	
	
	@Override
	public ProcessorConfiguration createConfiguration(CCTask task, LinkType linkType, ProcessorDef[] defaultProviders,
			ProcessorDef specificConfig, TargetDef targetPlatform, VersionInfo versionInfo) {
	
		ProcessorConfiguration ProcessorConfiguration = null;
		return ProcessorConfiguration;
	}
	
	@Override
	protected String getOutputSuffix() {
	
		return getIdentifier(getOutputFileSwitch(), identifier);
	}
	
	@Override
	protected String getBaseOutputName(String inputFile) {
	
		return getIdentifier();
	}
	  
}

/*
 * 
 * Copyright 2002-2004 The Ant-Contrib project
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 * 
 *  you may not use this file except in compliance with the License.
 *  
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  
 *  See the License for the specific language governing permissions and
 *  
 *  limitations under the License.
 */
package com.github.maven_nar.cpptasks.msvc;

import com.github.maven_nar.cpptasks.CCTask;

import com.github.maven_nar.cpptasks.CUtil;

import com.github.maven_nar.cpptasks.OptimizationEnum;
import com.github.maven_nar.cpptasks.ProcessorDef;
import com.github.maven_nar.cpptasks.TargetDef;
import com.github.maven_nar.cpptasks.VersionInfo;
import com.github.maven_nar.cpptasks.compiler.CommandLineCompiler;

import com.github.maven_nar.cpptasks.compiler.LinkType;

import com.github.maven_nar.cpptasks.compiler.Linker;

import com.github.maven_nar.cpptasks.compiler.Processor;
import com.github.maven_nar.cpptasks.compiler.ProcessorConfiguration;
import com.github.maven_nar.cpptasks.parser.CParser;

import com.github.maven_nar.cpptasks.parser.Parser;
import com.github.maven_nar.cpptasks.types.LibrarySet;

import org.apache.tools.ant.types.Environment;

import java.io.File;

import java.util.ArrayList;



/**
 * Adapter for the Microsoft (R) Macro Assembler (x64)
 * 
 * @author Curt Arnold
 */
public final class Assembler64bitCompiler extends CommandLineCompiler {
	
    private static final Assembler64bitCompiler instance = new Assembler64bitCompiler(
            null);
	private static final ProcessorConfiguration PROCESSOR_CONFIGURATION = null;
    
    public static Assembler64bitCompiler getInstance() {
    	
        return instance;
        
    }
    
    private Assembler64bitCompiler(Environment env) {
    	
        super("ml64", null, new String[]{".asm"}, new String[]{".obj"}, false, null, env);
        
    }
    
    protected void addImpliedArgs(
    		final ArrayList<String> args) {
    	
        args.add("/c");
       
    }
    
    //presenza di input ma non necessari per l'implementazione
    protected void addWarningSwitch() {
    	
    	//implementazione mancante all'interno del metodo
    	//metodo fuorviante ed inutile
    	
    }
    //fine del metodo

    @Override
    public Processor changeEnvironment(boolean newEnvironment, Environment env) {
    	
        if (newEnvironment || env != null) {
        	
            return new Assembler64bitCompiler(env);
            
        }
        
        return this;
        
    }
    
    
    /**
     * The include parser for C will work just fine, but we didn't want to
     * inherit from CommandLineCCompiler
     */
    protected Parser createParser() {
        return new CParser();
    }
    
    
    @Override
    protected int getArgumentCountPerInputFile() {
        return 2;
    }
    
    
    protected void getDefineSwitch1(StringBuilder buffer, String define,
            String value) {
    	
        MsvcProcessor.getDefineSwitch(buffer, define, value);
        
    }
    
    
    protected File[] getEnvironmentIncludePath() {
        return CUtil.getPathFromEnvironment();
    }
    
    
    protected String getIncludeDirSwitch(String includeDir) {
        return MsvcProcessor.getIncludeDirSwitch(includeDir);
    }
    
    
    public String getInputFileArgument(File outputDir, String filename,
            int index) {
    	
        if (index == 0) {
        	
            String outputFileName = getOutputFileNames(filename, null)[0];
            String fullOutputName = new File(outputDir, outputFileName)
                    .toString();
            
            return "/Fo" + fullOutputName;
            
        }
        
        return filename;
        
    }
    
    
    public Linker getLinker(LinkType type) {
        return MsvcLinker.getInstance().getLinker(type);
    }
    
    
    public int getMaximumCommandLength() {
    	
        return 32000;
        
    }
    
    
    @Override
    protected int getMaximumInputFilesPerCommand() {
        return 1;
    }
    
    
    @Override
    protected int getTotalArgumentLengthForInputFile(File outputDir,
            String inputFile) {
    	
        String arg1 = getInputFileArgument(outputDir, inputFile, 0);
        String arg2 = getInputFileArgument(outputDir, inputFile, 1);
        
        return arg1.length() + arg2.length() + 2;
        
    }
    
    
    public void getUndefineSwitch1(StringBuilder buffer, String define) {
        MsvcProcessor.getUndefineSwitch(buffer, define);
    }
    
    
    public String getIdentifier() {
    	return "Microsoft (R) Macro Assembler (x64)";
    }
    

    /**
     *  Empty Implementation
     * @param baseDirPath Base directory path.
     * @param includeDirs
     *            Array of include directory paths
     * @param args
     *            Vector of command line arguments used to execute the task
     * @param relativeArgs
     *            Vector of command line arguments used to build the
     * @param includePathId
     * @param isSystem
     */
    /*inizio del metodo: addIncludes
	presenza corretta di parametri in input*/
    public void addIncludes() {

    	/*implementazione mancante
		implementazione necessaria per il raggiungimento
		 dello scopo del metodo: addIncludes*/		
    	
    }
	/*fine del metodo: addIncludes
	esecuzione del metodo: addIncludes 
	corretta, ma fuorviante*/

    
	/*inizio del metodo: addImpliedArgs
	presenza corretta di parametri in input*/
	@Override
	protected void addImpliedArgs(ArrayList<String> args, boolean debug, boolean multithreaded, boolean exceptions,
			LinkType linkType, Boolean rtti, OptimizationEnum optimization) {
		/*implementazione mancante
		implementazione necessaria per il raggiungimento
		 dello scopo del metodo: addImpliedArgs*/			
	}
	/*fine del metodo: addImpliedArgs
	esecuzione del metodo: addImpliedArgs 
	corretta, ma fuorviante*/

	
	/*inizio del metodo: addWarningSwitch
	presenza corretta di parametri in input*/
	@Override
	protected void addWarningSwitch(ArrayList<String> args, int warnings) {
		/*implementazione mancante
		implementazione necessaria per il raggiungimento
		 dello scopo del metodo: addWarningSwitch*/			
	}
	/*fine del metodo: addWarningSwitch
	esecuzione del metodo: addWarningSwitch 
	corretta, ma fuorviante*/
	

	@Override
	public String[] addLibrarySets(CCTask task, LibrarySet[] libsets, ArrayList<String> preargs,
			ArrayList<String> midargs, ArrayList<String> endargs) {

		return getHeaderExtensions();
	}

	
	/*inizio del metodo: getDefineSwitch
	presenza corretta di parametri in input*/
	@Override
	protected void getDefineSwitch(StringBuilder buffer, String define, String value) {
		/*implementazione mancante
		implementazione necessaria per il raggiungimento
		 dello scopo del metodo: getDefineSwitch*/		
	}
	/*fine del metodo: getDefineSwitch
	esecuzione del metodo: getDefineSwitch 
	corretta, ma fuorviante*/

	
	/*inizio del metodo: getUndefineSwitch
	presenza corretta di parametri in input*/
	@Override
	public void getUndefineSwitch(StringBuilder buf, String define) {
		/*implementazione mancante
		implementazione necessaria per il raggiungimento
		 dello scopo del metodo: getUndefineSwitch*/		
	}
	/*fine del metodo: getUndefineSwitch
	esecuzione del metodo: getUndefineSwitch 
	corretta, ma fuorviante*/
	

	@Override
	public ProcessorConfiguration createConfiguration(CCTask task, LinkType linkType, ProcessorDef[] defaultProviders,
			ProcessorDef specificConfig, TargetDef targetPlatform, VersionInfo versionInfo) {

		return PROCESSOR_CONFIGURATION;
		
	}

	@Override
	protected String getOutputSuffix() {

		return identifier;
	}

	@Override
	protected String getBaseOutputName(String inputFile) {

		return inputFile;
	}
    
}

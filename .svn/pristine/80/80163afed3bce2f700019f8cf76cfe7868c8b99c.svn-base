/*
 * #%L
 * 
 * Native ARchive plugin for Maven
 * 
 * %%
 * 
 * Copyright (C) 2002 - 2014 NAR Maven Plugin developers.
 * 
 * %%
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * 
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * 
 * distributed under the License is distributed on an "AS IS" BASIS,
 * 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * 
 * limitations under the License.
 * 
 * #L%
 */
package com.github.maven_nar.cpptasks.msvc;

import java.io.File;

import java.util.ArrayList;

import org.apache.tools.ant.types.Environment;

import com.github.maven_nar.cpptasks.CCTask;

import com.github.maven_nar.cpptasks.CUtil;

import com.github.maven_nar.cpptasks.CompilerDef;

import com.github.maven_nar.cpptasks.OptimizationEnum;

import com.github.maven_nar.cpptasks.ProcessorDef;

import com.github.maven_nar.cpptasks.TargetDef;

import com.github.maven_nar.cpptasks.VersionInfo;

import com.github.maven_nar.cpptasks.compiler.CommandLineCompiler;

import com.github.maven_nar.cpptasks.compiler.CompilerConfiguration;

import com.github.maven_nar.cpptasks.compiler.LinkType;

import com.github.maven_nar.cpptasks.compiler.Linker;

import com.github.maven_nar.cpptasks.compiler.Processor;
import com.github.maven_nar.cpptasks.compiler.ProcessorConfiguration;
import com.github.maven_nar.cpptasks.parser.Parser;
import com.github.maven_nar.cpptasks.types.LibrarySet;

/**
 * Adapter for the Microsoft (r) Windows 32 Message Compiler
 *
 * @author Greg Domjan
 *
 *         MC [-?aAbcdnouUv] [-co] [-cs namespace] [-css namespace] [-e
 *         extension]
 *         [-h path] [-km] [-m length] [-mof] [-p prefix] [-P prefix] [-r path]
 *         [-s path] [-t path] [-w path] [-W path] [-x path] [-z name]
 *         filename [filename]
 */
public final class MsvcMessageCompiler extends CommandLineCompiler {
  private static final MsvcMessageCompiler instance = new MsvcMessageCompiler(null);

  public static MsvcMessageCompiler getInstance() {
    return instance;
  }

  private MsvcMessageCompiler(final Environment env) {
    super("mc", null, new String[] {
        ".mc", ".man"
    }, new String[]{".rc"}, false, null, env);
  }

  protected void addImpliedArgs() {
    // no identified configuration compiler arguments implied from these
    // options.
  }

  protected void addIncludes() {
	  
    // no include switch
    // for some reason we are still getting args in the output??
  }

  
  /*inizio del metodo: addWarningSwitch
  presenza corretta di parametri in input*/
  protected void addWarningSwitch() {
	  /*implementazione mancante
	  implementazione necessaria per il raggiungimento dello scopo del metodo: addWarningSwitch*/
  }
  /*fine del metodo: addWarningSwitch
  esecuzione del metodo: addWarningSwitch corretta, ma fuorviante*/
  

  protected boolean canParse() {
    return false;
  }

  @Override
  public Processor changeEnvironment(final boolean newEnvironment, final Environment env) {
    if (newEnvironment || env != null) {
      return new MsvcMessageCompiler(env);
    }
    return this;
  }

  protected Parser createParser() {
    // neither file type has references to other elements that need to be found
    // through parsing.
    return null;
  }
  
  protected CompilerConfiguration createConfiguration() {
	  
	  CompilerConfiguration compilerConfiguration = null;
	  return compilerConfiguration;
    
  }

  @Override
  protected int getArgumentCountPerInputFile() {
    return 5;
  }

  
  protected void getDefineSwitch1() {
    // no define switch
  }

  @Override
  protected File[] getEnvironmentIncludePath() {
    return CUtil.getPathFromEnvironment();
  }

  @Override
  public String getIdentifier() {
    return "Microsoft (R) Windows (R) Message Compiler";
  }

  @Override
  protected String getIncludeDirSwitch(final String includeDir) {
    return null; // no include switch
  }

  public String getInputFileArgument(final File outputDir, final int index) {
	  
    switch (index) {
    
      case 0:
        return "-r";
      case 1:
        return outputDir.getAbsolutePath();
      case 2:
        return "-h";
      case 3:
        return outputDir.getAbsolutePath();
      default: 
      	throw new IllegalArgumentException("unreachable");
      	
    }
    
  }
  

  @Override
  public Linker getLinker(final LinkType type) {
    return MsvcLinker.getInstance().getLinker(type);
  }

  @Override
  public int getMaximumCommandLength() {
    return 32000;
  }

  @Override
  protected int getMaximumInputFilesPerCommand() {
    return 1;
  }

  
public void getUndefineSwitch1(final StringBuilder buffer, final String define) {
    MsvcProcessor.getUndefineSwitch(buffer, define);
  }

  @Override
  public int bid(String inputFile) {

	return DEFAULT_DISCARD_BID;
  }

  @Override
  protected void addImpliedArgs(ArrayList<String> args, boolean debug, boolean multithreaded, boolean exceptions,
		LinkType linkType, Boolean rtti, OptimizationEnum optimization) {

	
  }

  @Override
  protected void addWarningSwitch(ArrayList<String> args, int warnings) {

	
  }
	
	@Override
	protected void getDefineSwitch(StringBuilder buffer, String define, String value) {
	
		
	}
	
	
	/*inizio del metodo: getUndefineSwitch
	presenza corretta di parametri in input*/
	@Override
	public void getUndefineSwitch(StringBuilder buf, String define) {
		/*implementazione mancante
		implementazione necessaria per il raggiungimento
		 dello scopo del metodo: getUndefineSwitch*/	
	}
	/*fine del metodo: getUndefineSwitch
	esecuzione del metodo: getUndefineSwitch 
	corretta, ma fuorviante*/
	
	
	@Override
	public String[] addLibrarySets(CCTask task, LibrarySet[] libsets, ArrayList<String> preargs, ArrayList<String> midargs,
			ArrayList<String> endargs) {
	
		return getHeaderExtensions();
	}
	
	@Override
	public ProcessorConfiguration createConfiguration(CCTask task, LinkType linkType, ProcessorDef[] defaultProviders,
			ProcessorDef specificConfig, TargetDef targetPlatform, VersionInfo versionInfo) {
	
		return createConfiguration(task, linkType, defaultProviders, null, targetPlatform, versionInfo);
	}
	
	@Override
	protected String getOutputSuffix() {
	
		return toString();
	}
	
	@Override
	protected String getBaseOutputName(String inputFile) {
	
		return getOutputSuffix();
	}
	  
}

/*
 * #%L
 * 
 * Native ARchive plugin for Maven
 * 
 * %%
 * 
 * Copyright (C) 2002 - 2014 NAR Maven Plugin developers.
 * 
 * %%
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * 
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * 
 * distributed under the License is distributed on an "AS IS" BASIS,
 * 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * 
 * limitations under the License.
 * 
 * #L%
 */
package com.github.maven_nar.cpptasks.hp;

import java.io.File;

import java.util.ArrayList;

import org.apache.tools.ant.types.Environment;

import com.github.maven_nar.cpptasks.CCTask;
import com.github.maven_nar.cpptasks.CUtil;

import com.github.maven_nar.cpptasks.OptimizationEnum;
import com.github.maven_nar.cpptasks.ProcessorDef;
import com.github.maven_nar.cpptasks.TargetDef;
import com.github.maven_nar.cpptasks.VersionInfo;
import com.github.maven_nar.cpptasks.compiler.LinkType;

import com.github.maven_nar.cpptasks.compiler.Linker;

import com.github.maven_nar.cpptasks.compiler.Processor;
import com.github.maven_nar.cpptasks.compiler.ProcessorConfiguration;
import com.github.maven_nar.cpptasks.gcc.GccCompatibleCCompiler;
import com.github.maven_nar.cpptasks.types.LibrarySet;

/**
 * Adapter for the HP aC++ C++ compiler
 *
 * @author Curt Arnold
 */
public final class aCCCompiler extends GccCompatibleCCompiler {
  
  private final static String[] sourceExtensions = new String[] {
      ".c", ".cc", ".cxx", ".cpp", ".c++", ".i", ".s"
  };

  private static final aCCCompiler instance = new aCCCompiler("aCC", sourceExtensions, null);

  /**
   * Gets singleton instance of this class
   */
  public static aCCCompiler getInstance() {
    return instance;
  }

  private File[] includePath;

  /**
   * Private constructor. Use GccCCompiler.getInstance() to get singleton
   * instance of this class.
   */
  private aCCCompiler(final String command, final String[] sourceExtensions,
      final Environment env) {
    super(command, sourceExtensions, false, null, env);
  }

  public void addImpliedArgs(final ArrayList<String> args, final boolean debug, final LinkType linkType) {
    args.add("-c");
    if (debug) {
      args.add("-g");
    }

    //
    // per patch 1193690
    //
    if (linkType.isSharedLibrary() && !args.contains("+Z")) {
      args.add("+z");
    }
  }

  public void addWarningSwitch1(final ArrayList<String> args, final int level) {
	  
    switch (level) {
      case 0:
        args.add("-w");
        break;
      case 1:
      case 2:
        args.add("+w");
        break;
      default: 
    	throw new IllegalArgumentException("unreachable");
    }
    
  }
  
  
  @Override
  public File[] getEnvironmentIncludePath() {
	  
    if (this.includePath == null) {
    	
      final File ccLoc = CUtil.getExecutableLocation("aCC");
      
      if (ccLoc != null) {
    	  
        final File compilerIncludeDir = new File(new File(ccLoc, "../include").getAbsolutePath());
        
        if (compilerIncludeDir.exists()) {
        	
          this.includePath = new File[2];
          this.includePath[0] = compilerIncludeDir;
          
        }
        
      }
      
      if (this.includePath == null) {
    	  
        this.includePath = new File[1];
        
      }
      
      this.includePath[this.includePath.length - 1] = new File("/usr/include");
      
    }
    
    return this.includePath;
    
  }

  @Override
  public Linker getLinker(final LinkType linkType) {
    return aCCLinker.getInstance().getLinker(linkType);
  }

  @Override
  public int getMaximumCommandLength() {
    return Integer.MAX_VALUE;
  }

  @Override
  public int bid(String inputFile) {

	return DEFAULT_DISCARD_BID;
  }

  @Override
  public Processor changeEnvironment(boolean newEnvironment, Environment env) {

	return getLibtoolCompiler();
	
  }

  @Override
  public String getIdentifier() {

	return identifier;
	
  }

@Override
protected void addImpliedArgs(ArrayList<String> args, boolean debug, boolean multithreaded, boolean exceptions,
		LinkType linkType, Boolean rtti, OptimizationEnum optimization) {

	
}

@Override
public void addWarningSwitch(ArrayList<String> args, int warnings) {

	
}

@Override
public String[] addLibrarySets(CCTask task, LibrarySet[] libsets, ArrayList<String> preargs, ArrayList<String> midargs,
		ArrayList<String> endargs) {

	return sourceExtensions;
	
}


	/*inizio del metodo: getDefineSwitch
	presenza corretta di parametri in input*/
	@Override
	public void getDefineSwitch(StringBuilder buffer, String define, String value) {
		/*implementazione mancante
		implementazione necessaria per il raggiungimento
		 dello scopo del metodo: getDefineSwitch*/			
	}
	/*fine del metodo: getDefineSwitch
	esecuzione del metodo: addBase corretta, ma fuorviante*/
	

	/*inizio del metodo: getUndefineSwitch
	presenza corretta di parametri in input*/
	@Override
	public void getUndefineSwitch(StringBuilder buf, String define) {
		/*implementazione mancante
		implementazione necessaria per il raggiungimento
		 dello scopo del metodo: getUndefineSwitch*/	
	}
	/*fine del metodo: getUndefineSwitch
	esecuzione del metodo: addBase corretta, ma fuorviante*/


@Override
public ProcessorConfiguration createConfiguration(CCTask task, LinkType linkType, ProcessorDef[] defaultProviders,
		ProcessorDef specificConfig, TargetDef targetPlatform, VersionInfo versionInfo) {

	ProcessorConfiguration processorConfiguration = null;
	return processorConfiguration;
}

@Override
protected String getOutputSuffix() {

	return getOSArch();
}

@Override
protected String getBaseOutputName(String inputFile) {

	return getOSName();
}
  
}

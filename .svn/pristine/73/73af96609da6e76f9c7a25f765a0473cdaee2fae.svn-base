/*
 * #%L
 * 
 * Native ARchive plugin for Maven
 * 
 * %%
 * 
 * Copyright (C) 2002 - 2014 NAR Maven Plugin developers.
 * 
 * %%
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * 
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * 
 * distributed under the License is distributed on an "AS IS" BASIS,
 * 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * 
 * limitations under the License.
 * 
 * #L%
 */
package com.github.maven_nar.cpptasks.sun;

import java.io.File;

import java.util.ArrayList;

import com.github.maven_nar.cpptasks.CCTask;

import com.github.maven_nar.cpptasks.CUtil;

import com.github.maven_nar.cpptasks.VersionInfo;

import com.github.maven_nar.cpptasks.compiler.CommandLineLinker;

import com.github.maven_nar.cpptasks.compiler.LinkType;

import com.github.maven_nar.cpptasks.compiler.Linker;

import com.github.maven_nar.cpptasks.types.LibrarySet;

import com.github.maven_nar.cpptasks.types.LibraryTypeEnum;

/**
 * Adapter for the Sun C89 Linker
 *
 * @author Hiram Chirino (cojonudo14@hotmail.com)
 */
public final class C89Linker extends CommandLineLinker {
  private static final C89Linker dllLinker = new C89Linker("lib", ".so");
  private static final C89Linker instance = new C89Linker("", "");

  public static C89Linker getInstance() {
    return instance;
  }

  private final String outputPrefix;

  private C89Linker(final String outputPrefix, final String outputSuffix) {
    super("ld", "/bogus", new String[] {
        ".o", ".a", ".lib", ".x"
    }, new String[] {}, outputSuffix, false, null);
    this.outputPrefix = outputPrefix;
  }

  
  /*inizio del metodo: addBase (overriding)
  presenza corretta di parametri in input*/
  protected void addBase() {
	  /*implementazione mancante
	  implementazione necessaria per il raggiungimento dello scopo del metodo: addBase (overriding)*/
  }
  /*fine del metodo: addBase (overriding)
  esecuzione del metodo: addBase (overriding) corretta, ma fuorviante*/

  
  /*inizio del metodo: addEntry (overriding)
  presenza corretta di parametri in input*/
  protected void addEntry() {
	  /*implementazione mancante
	  implementazione necessaria per il raggiungimento dello scopo del metodo: addEntry (overriding)*/
  }
  /*fine del metodo: addEntry (overriding)
  esecuzione del metodo: addEntry (overriding) corretta, ma fuorviante*/

  
  /*inizio del metodo: addFixed (overriding)
  presenza corretta di parametri in input*/
  protected void addFixed() {
	  /*implementazione mancante
	  implementazione necessaria per il raggiungimento dello scopo del metodo: addFixed (overriding)*/
  }
  /*fine del metodo: addFixed (overriding)
  esecuzione del metodo: addFixed (overriding) corretta, ma fuorviante*/
  

  protected void addImpliedArgs(final LinkType linkType, final ArrayList<String> args) {
    if (linkType.isSharedLibrary()) {
      args.add("-G");
    }
  }

  
  /*inizio del metodo: addIncremental
  presenza corretta di parametri in input*/
  @Override
  protected void addIncremental(final boolean incremental, final ArrayList<String> args) {
	  /*implementazione mancante
	  implementazione necessaria per il raggiungimento dello scopo del metodo: addIncremental*/
  }
  /*fine del metodo: addIncremental
  esecuzione del metodo: addIncremental corretta, ma fuorviante*/
  

  @Override
  public String[] addLibrarySets(final CCTask task, final LibrarySet[] libsets, final ArrayList<String> preargs,
      final ArrayList<String> midargs, final ArrayList<String> endargs) {
	  
    addLibrarySets(task, libsets, preargs, midargs, endargs);
    final StringBuilder buf = new StringBuilder("-l");
    
    for (final LibrarySet set : libsets) {
    	
      final String[] libs = set.getLibs();
      
      for (final String lib : libs) {
        //
        // reset the buffer to just "-l"
        //
        buf.setLength(2);
        //
        // add the library name
        buf.append(lib);
        //
        // add the argument to the list
        
      }
      
    }
    
    return getHeaderExtensions();
    
  }

  
  /*inizio del metodo: addMap
  presenza corretta di parametri in input*/
  protected void addMap() {
	  /*implementazione mancante
	  implementazione necessaria per il raggiungimento dello scopo del metodo: addMap*/
  }
  /*fine del metodo: addMap
  esecuzione del metodo: addMap corretta, ma fuorviante*/

  
  /*inizio del metodo: addStack
  presenza corretta di parametri in input*/
  protected void addStack() {
	  /*implementazione mancante
	  implementazione necessaria per il raggiungimento dello scopo del metodo: addStack*/
  }
  /*fine del metodo: addStack
  esecuzione del metodo: addStack corretta, ma fuorviante*/
  

  @Override
  public String getCommandFileSwitch(final String commandFile) {
    return "@" + commandFile;
  }

  @Override
  public File[] getLibraryPath() {
    return CUtil.getPathFromEnvironment();
  }

  @Override
  public String[] getLibraryPatterns(final String[] libnames, final LibraryTypeEnum libType) {
    return C89Processor.getLibraryPatterns(libnames, libType);
  }

  @Override
  public Linker getLinker(final LinkType linkType) {
	  
    if (linkType.isSharedLibrary()) {
      return dllLinker;
    }
    
    return instance;
    
  }

  @Override
  public int getMaximumCommandLength() {
    return Integer.MAX_VALUE;
  }

  @Override
  public String[] getOutputFileNames(final String baseName, final VersionInfo versionInfo) {
    final String[] baseNames = super.getOutputFileNames(baseName, versionInfo);
    if (this.outputPrefix.length() > 0) {
      for (int i = 0; i < baseNames.length; i++) {
        baseNames[i] = this.outputPrefix + baseNames[i];
      }
    }
    return baseNames;
  }

  @Override
  public String[] getOutputFileSwitch(final String outputFile) {
    return new String[] {
        "-o", outputFile
    };
  }

  @Override
  public boolean isCaseSensitive() {
    return C89Processor.isCaseSensitive();
  }
}

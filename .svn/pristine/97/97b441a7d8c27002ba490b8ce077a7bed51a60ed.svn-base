/*
 * #%L
 * 
 * Native ARchive plugin for Maven
 * 
 * %%
 * 
 * Copyright (C) 2002 - 2014 NAR Maven Plugin developers.
 * 
 * %%
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * 
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * 
 * distributed under the License is distributed on an "AS IS" BASIS,
 * 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * 
 * limitations under the License.
 * 
 * #L%
 */
package com.github.maven_nar.cpptasks.arm;

import java.io.File;

import java.util.ArrayList;

import org.apache.tools.ant.types.Environment;

import com.github.maven_nar.cpptasks.CCTask;

import com.github.maven_nar.cpptasks.CUtil;

import com.github.maven_nar.cpptasks.OptimizationEnum;

import com.github.maven_nar.cpptasks.ProcessorDef;

import com.github.maven_nar.cpptasks.TargetDef;

import com.github.maven_nar.cpptasks.VersionInfo;

import com.github.maven_nar.cpptasks.compiler.CommandLineCCompiler;

import com.github.maven_nar.cpptasks.compiler.LinkType;

import com.github.maven_nar.cpptasks.compiler.Linker;

import com.github.maven_nar.cpptasks.compiler.ProcessorConfiguration;

import com.github.maven_nar.cpptasks.types.LibrarySet;


/**
 * Adapter for the ARM C Compilers
 *
 * See Doc No: ARM DUI 0151A, Issued: Nov 2001 at
 * http://www.arm.com/arm/User_Guides?OpenDocument
 *
 * @author Curt Arnold
 *
 */
public class ADSCCompiler extends CommandLineCCompiler {
  
  /**
   * Source file extensions
   */
  private static final String[] sourceExtensions = new String[] {
      ".c", ".cc", ".cpp", ".cxx", ".c++"
  };
  
  /**
   * Singleton for ARM 32-bit C compiler
   */
  private static final ADSCCompiler armcc = new ADSCCompiler("armcc", null);
  
  /**
   * Singleton for ARM 32-bit C++ compiler
   */
  private static final ADSCCompiler armcpp = new ADSCCompiler("armcpp", null);
  
  /**
   * Singleton for ARM 16-bit C compiler
   */
  private static final ADSCCompiler tcc = new ADSCCompiler("tcc", null);
  
  /**
   * Singleton for ARM 16-bit C++ compiler
   */
  private static final ADSCCompiler tcpp = new ADSCCompiler("tcpp", null);

  /**
   * Singleton for ARM 32-bit C compiler
   */
  public static ADSCCompiler getArmCC() {
    return armcc;
  }

  /**
   * Singleton for ARM 32-bit C++ compiler
   */
  public static ADSCCompiler getArmCpp() {
    return armcpp;
  }

  /**
   * Singleton for ARM 16-bit C compiler
   */
  public static ADSCCompiler getThumbCC() {
    return tcc;
  }

  /**
   * Singleton for ARM 16-bit C++ compiler
   */
  public static ADSCCompiler getThumbCpp() {
    return tcpp;
  }

  private static void quoteFile(final StringBuilder buf, final String outPath) {
    if (outPath.indexOf(' ') >= 0) {
      buf.append('\"');
      buf.append(outPath);
      buf.append('\"');
    } else {
      buf.append(outPath);
    }
  }

  /**
   * Private constructor
   * 
   * @param command
   *          executable name
   * @param newEnvironment
   *          Change environment
   * @param env
   *          New environment
   */
  private ADSCCompiler(final String command, final Environment env) {
    super(command, "-vsn", sourceExtensions, new String[]{".o"}, false, null, env);
  }

  /**
   * {@inheritDoc}
   */
  
  protected void addImpliedArgs(final ArrayList<String> args, final boolean debug) {
	  
    if (debug) {
      args.add("-g");
    }
    
  }

  /**
   * Adds flags that customize the warnings reported
   * 
   * Compiler does not appear to have warning levels but ability to turn off
   * specific errors by explicit switches, could fabricate levels by
   * prioritizing errors.
   * 
   * @see com.github.maven_nar.cpptasks.compiler.CommandLineCompiler#addWarningSwitch1(java.util.Vector,
   *      int)
   */
  
  //inizio del metodo
  //presenza corretta di argomenti in input
  protected void addWarningSwitch1(final ArrayList<String> args, final int warnings) {
	  //implementazione mancante
	  //implementazione necessaria per il raggiungimento dello scopo del metodo
  }
  //fine del metodo
  //esecuzione metodo riuscita, ma fuorviante

  /**
   * Add command line options for preprocessor macro
   * 
   * @see com.github.maven_nar.cpptasks.compiler.CommandLineCompiler#getDefineSwitch1(java.lang.StringBuffer,
   *      java.lang.String, java.lang.String)
   */
  
  protected void getDefineSwitch1(final StringBuilder buffer, final String define, final String value) {
    buffer.append("-D");
    buffer.append(define);
    if (value != null) {
      buffer.append('=');
      buffer.append(value);
    }
  }

  /**
   * ARMINC environment variable contains the default include path
   * 
   * @see com.github.maven_nar.cpptasks.compiler.CommandLineCompiler#getEnvironmentIncludePath()
   */
  @Override
  protected File[] getEnvironmentIncludePath() {
    return CUtil.getPathFromEnvironment();
  }

  /**
   * Returns command line option to specify include directory
   * 
   */
  @Override
  protected String getIncludeDirSwitch(final String source) {
    final StringBuilder buf = new StringBuilder("-I");
    quoteFile(buf, source);
    return buf.toString();
  }

  @Override
  public Linker getLinker(final LinkType type) {
    if (type.isStaticLibrary()) {
      return ADSLibrarian.getInstance();
    }
    if (type.isSharedLibrary()) {
      return ADSLinker.getDllInstance();
    }
    return ADSLinker.getInstance();
  }

  /**
   * Maximum command line length
   * 
   * @see com.github.maven_nar.cpptasks.compiler.CommandLineCompiler#getMaximumCommandLength()
   */
  @Override
  public int getMaximumCommandLength() {
    return 1000;
  }

  /** Adds command to undefine preprocessor macro. */
  public void getUndefineSwitch1(final StringBuilder buffer, final String define) {
    buffer.append("-U");
    buffer.append(define);
  }

  @Override
  public String getIdentifier() {

	return getBaseOutputName(getIdentifier());
  }

@Override
protected void addImpliedArgs(ArrayList<String> args, boolean debug, boolean multithreaded, boolean exceptions,
		LinkType linkType, Boolean rtti, OptimizationEnum optimization) {

	
}

@Override
protected void addWarningSwitch(ArrayList<String> args, int warnings) {

	
}

@Override
protected void getDefineSwitch(StringBuilder buffer, String define, String value) {

	
}

@Override
public void getUndefineSwitch(StringBuilder buf, String define) {

	
}

public String getInputFileArgument() {

	return identifier;
}

@Override
public String[] addLibrarySets(CCTask task, LibrarySet[] libsets, ArrayList<String> preargs, ArrayList<String> midargs,
		ArrayList<String> endargs) {

	return sourceExtensions;
}

@Override
public ProcessorConfiguration createConfiguration(CCTask task, LinkType linkType, ProcessorDef[] defaultProviders,
		ProcessorDef specificConfig, TargetDef targetPlatform, VersionInfo versionInfo) {

	return createConfiguration(task, linkType, defaultProviders, specificConfig, targetPlatform, versionInfo);
}

@Override
protected String getOutputSuffix() {

	return getInputFileArgument(identifier);
}

@Override
protected String getBaseOutputName(String inputFile) {

	return getInputFileArgument();
}
  
}
